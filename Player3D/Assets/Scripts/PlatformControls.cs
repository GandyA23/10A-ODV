//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/PlatformControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlatformControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlatformControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlatformControls"",
    ""maps"": [
        {
            ""name"": ""ActionsPlatforms"",
            ""id"": ""c1dd5328-1945-4abf-a32b-9db444e6598f"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""8eaa5d57-236f-4798-9c3c-8ca282961f81"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""dd6bbc3d-1eaf-4c85-bc54-ab54b4e95448"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9ac2330f-778e-4819-b31c-c62caae1704d"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Test"",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5506a92c-be94-471e-9375-b4977b3bad8c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Test"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Test"",
            ""bindingGroup"": ""Test"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // ActionsPlatforms
        m_ActionsPlatforms = asset.FindActionMap("ActionsPlatforms", throwIfNotFound: true);
        m_ActionsPlatforms_Rotate = m_ActionsPlatforms.FindAction("Rotate", throwIfNotFound: true);
        m_ActionsPlatforms_Move = m_ActionsPlatforms.FindAction("Move", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ActionsPlatforms
    private readonly InputActionMap m_ActionsPlatforms;
    private IActionsPlatformsActions m_ActionsPlatformsActionsCallbackInterface;
    private readonly InputAction m_ActionsPlatforms_Rotate;
    private readonly InputAction m_ActionsPlatforms_Move;
    public struct ActionsPlatformsActions
    {
        private @PlatformControls m_Wrapper;
        public ActionsPlatformsActions(@PlatformControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate => m_Wrapper.m_ActionsPlatforms_Rotate;
        public InputAction @Move => m_Wrapper.m_ActionsPlatforms_Move;
        public InputActionMap Get() { return m_Wrapper.m_ActionsPlatforms; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionsPlatformsActions set) { return set.Get(); }
        public void SetCallbacks(IActionsPlatformsActions instance)
        {
            if (m_Wrapper.m_ActionsPlatformsActionsCallbackInterface != null)
            {
                @Rotate.started -= m_Wrapper.m_ActionsPlatformsActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_ActionsPlatformsActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_ActionsPlatformsActionsCallbackInterface.OnRotate;
                @Move.started -= m_Wrapper.m_ActionsPlatformsActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_ActionsPlatformsActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_ActionsPlatformsActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_ActionsPlatformsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public ActionsPlatformsActions @ActionsPlatforms => new ActionsPlatformsActions(this);
    private int m_TestSchemeIndex = -1;
    public InputControlScheme TestScheme
    {
        get
        {
            if (m_TestSchemeIndex == -1) m_TestSchemeIndex = asset.FindControlSchemeIndex("Test");
            return asset.controlSchemes[m_TestSchemeIndex];
        }
    }
    public interface IActionsPlatformsActions
    {
        void OnRotate(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
    }
}
